# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc
import warnings

import replicacao_pb2 as replicacao__pb2

GRPC_GENERATED_VERSION = '1.73.0'
GRPC_VERSION = grpc.__version__
_version_not_supported = False

try:
    from grpc._utilities import first_version_is_lower
    _version_not_supported = first_version_is_lower(GRPC_VERSION, GRPC_GENERATED_VERSION)
except ImportError:
    _version_not_supported = True

if _version_not_supported:
    raise RuntimeError(
        f'The grpc package installed is at version {GRPC_VERSION},'
        + f' but the generated code in replicacao_pb2_grpc.py depends on'
        + f' grpcio>={GRPC_GENERATED_VERSION}.'
        + f' Please upgrade your grpc module to grpcio>={GRPC_GENERATED_VERSION}'
        + f' or downgrade your generated code using grpcio-tools<={GRPC_VERSION}.'
    )


class ClienteServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.EnviarDado = channel.unary_unary(
                '/replicacao.ClienteService/EnviarDado',
                request_serializer=replicacao__pb2.Dado.SerializeToString,
                response_deserializer=replicacao__pb2.Resposta.FromString,
                _registered_method=True)
        self.Consultar = channel.unary_unary(
                '/replicacao.ClienteService/Consultar',
                request_serializer=replicacao__pb2.Consulta.SerializeToString,
                response_deserializer=replicacao__pb2.Resposta.FromString,
                _registered_method=True)


class ClienteServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def EnviarDado(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Consultar(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClienteServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'EnviarDado': grpc.unary_unary_rpc_method_handler(
                    servicer.EnviarDado,
                    request_deserializer=replicacao__pb2.Dado.FromString,
                    response_serializer=replicacao__pb2.Resposta.SerializeToString,
            ),
            'Consultar': grpc.unary_unary_rpc_method_handler(
                    servicer.Consultar,
                    request_deserializer=replicacao__pb2.Consulta.FromString,
                    response_serializer=replicacao__pb2.Resposta.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'replicacao.ClienteService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('replicacao.ClienteService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ClienteService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def EnviarDado(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replicacao.ClienteService/EnviarDado',
            replicacao__pb2.Dado.SerializeToString,
            replicacao__pb2.Resposta.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def Consultar(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replicacao.ClienteService/Consultar',
            replicacao__pb2.Consulta.SerializeToString,
            replicacao__pb2.Resposta.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)


class ServidorServiceStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.ReplicarEntrada = channel.unary_unary(
                '/replicacao.ServidorService/ReplicarEntrada',
                request_serializer=replicacao__pb2.LogEntry.SerializeToString,
                response_deserializer=replicacao__pb2.Ack.FromString,
                _registered_method=True)
        self.CommitEntrada = channel.unary_unary(
                '/replicacao.ServidorService/CommitEntrada',
                request_serializer=replicacao__pb2.CommitRequest.SerializeToString,
                response_deserializer=replicacao__pb2.Ack.FromString,
                _registered_method=True)
        self.SincronizarReplica = channel.unary_unary(
                '/replicacao.ServidorService/SincronizarReplica',
                request_serializer=replicacao__pb2.EstadoReplica.SerializeToString,
                response_deserializer=replicacao__pb2.EntradasParaSincronizar.FromString,
                _registered_method=True)


class ServidorServiceServicer(object):
    """Missing associated documentation comment in .proto file."""

    def ReplicarEntrada(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def CommitEntrada(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def SincronizarReplica(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServidorServiceServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'ReplicarEntrada': grpc.unary_unary_rpc_method_handler(
                    servicer.ReplicarEntrada,
                    request_deserializer=replicacao__pb2.LogEntry.FromString,
                    response_serializer=replicacao__pb2.Ack.SerializeToString,
            ),
            'CommitEntrada': grpc.unary_unary_rpc_method_handler(
                    servicer.CommitEntrada,
                    request_deserializer=replicacao__pb2.CommitRequest.FromString,
                    response_serializer=replicacao__pb2.Ack.SerializeToString,
            ),
            'SincronizarReplica': grpc.unary_unary_rpc_method_handler(
                    servicer.SincronizarReplica,
                    request_deserializer=replicacao__pb2.EstadoReplica.FromString,
                    response_serializer=replicacao__pb2.EntradasParaSincronizar.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'replicacao.ServidorService', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))
    server.add_registered_method_handlers('replicacao.ServidorService', rpc_method_handlers)


 # This class is part of an EXPERIMENTAL API.
class ServidorService(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def ReplicarEntrada(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replicacao.ServidorService/ReplicarEntrada',
            replicacao__pb2.LogEntry.SerializeToString,
            replicacao__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def CommitEntrada(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replicacao.ServidorService/CommitEntrada',
            replicacao__pb2.CommitRequest.SerializeToString,
            replicacao__pb2.Ack.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)

    @staticmethod
    def SincronizarReplica(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(
            request,
            target,
            '/replicacao.ServidorService/SincronizarReplica',
            replicacao__pb2.EstadoReplica.SerializeToString,
            replicacao__pb2.EntradasParaSincronizar.FromString,
            options,
            channel_credentials,
            insecure,
            call_credentials,
            compression,
            wait_for_ready,
            timeout,
            metadata,
            _registered_method=True)
